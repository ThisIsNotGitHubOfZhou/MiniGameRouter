// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/discover.proto

package discover

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DiscoverService_DiscoverServiceWithName_FullMethodName = "/discover.DiscoverService/DiscoverServiceWithName"
	DiscoverService_DiscoverServiceWithID_FullMethodName   = "/discover.DiscoverService/DiscoverServiceWithID"
	DiscoverService_GetRouteInfoWithName_FullMethodName    = "/discover.DiscoverService/GetRouteInfoWithName"
	DiscoverService_GetRouteInfoWithPrefix_FullMethodName  = "/discover.DiscoverService/GetRouteInfoWithPrefix"
)

// DiscoverServiceClient is the client API for DiscoverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoverServiceClient interface {
	DiscoverServiceWithName(ctx context.Context, in *DiscoverServiceWithNameRequest, opts ...grpc.CallOption) (*DiscoverServiceResponse, error)
	DiscoverServiceWithID(ctx context.Context, in *DiscoverServiceWithIDRequest, opts ...grpc.CallOption) (*DiscoverServiceResponse, error)
	GetRouteInfoWithName(ctx context.Context, in *GetRouteInfoWithNameRequest, opts ...grpc.CallOption) (*RouteInfosResponse, error)
	GetRouteInfoWithPrefix(ctx context.Context, in *GetRouteInfoWithPrefixRequest, opts ...grpc.CallOption) (*RouteInfosResponse, error)
}

type discoverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoverServiceClient(cc grpc.ClientConnInterface) DiscoverServiceClient {
	return &discoverServiceClient{cc}
}

func (c *discoverServiceClient) DiscoverServiceWithName(ctx context.Context, in *DiscoverServiceWithNameRequest, opts ...grpc.CallOption) (*DiscoverServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverServiceResponse)
	err := c.cc.Invoke(ctx, DiscoverService_DiscoverServiceWithName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoverServiceClient) DiscoverServiceWithID(ctx context.Context, in *DiscoverServiceWithIDRequest, opts ...grpc.CallOption) (*DiscoverServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverServiceResponse)
	err := c.cc.Invoke(ctx, DiscoverService_DiscoverServiceWithID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoverServiceClient) GetRouteInfoWithName(ctx context.Context, in *GetRouteInfoWithNameRequest, opts ...grpc.CallOption) (*RouteInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteInfosResponse)
	err := c.cc.Invoke(ctx, DiscoverService_GetRouteInfoWithName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoverServiceClient) GetRouteInfoWithPrefix(ctx context.Context, in *GetRouteInfoWithPrefixRequest, opts ...grpc.CallOption) (*RouteInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteInfosResponse)
	err := c.cc.Invoke(ctx, DiscoverService_GetRouteInfoWithPrefix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoverServiceServer is the server API for DiscoverService service.
// All implementations must embed UnimplementedDiscoverServiceServer
// for forward compatibility
type DiscoverServiceServer interface {
	DiscoverServiceWithName(context.Context, *DiscoverServiceWithNameRequest) (*DiscoverServiceResponse, error)
	DiscoverServiceWithID(context.Context, *DiscoverServiceWithIDRequest) (*DiscoverServiceResponse, error)
	GetRouteInfoWithName(context.Context, *GetRouteInfoWithNameRequest) (*RouteInfosResponse, error)
	GetRouteInfoWithPrefix(context.Context, *GetRouteInfoWithPrefixRequest) (*RouteInfosResponse, error)
	mustEmbedUnimplementedDiscoverServiceServer()
}

// UnimplementedDiscoverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoverServiceServer struct {
}

func (UnimplementedDiscoverServiceServer) DiscoverServiceWithName(context.Context, *DiscoverServiceWithNameRequest) (*DiscoverServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverServiceWithName not implemented")
}
func (UnimplementedDiscoverServiceServer) DiscoverServiceWithID(context.Context, *DiscoverServiceWithIDRequest) (*DiscoverServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverServiceWithID not implemented")
}
func (UnimplementedDiscoverServiceServer) GetRouteInfoWithName(context.Context, *GetRouteInfoWithNameRequest) (*RouteInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteInfoWithName not implemented")
}
func (UnimplementedDiscoverServiceServer) GetRouteInfoWithPrefix(context.Context, *GetRouteInfoWithPrefixRequest) (*RouteInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteInfoWithPrefix not implemented")
}
func (UnimplementedDiscoverServiceServer) mustEmbedUnimplementedDiscoverServiceServer() {}

// UnsafeDiscoverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoverServiceServer will
// result in compilation errors.
type UnsafeDiscoverServiceServer interface {
	mustEmbedUnimplementedDiscoverServiceServer()
}

func RegisterDiscoverServiceServer(s grpc.ServiceRegistrar, srv DiscoverServiceServer) {
	s.RegisterService(&DiscoverService_ServiceDesc, srv)
}

func _DiscoverService_DiscoverServiceWithName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverServiceWithNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoverServiceServer).DiscoverServiceWithName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoverService_DiscoverServiceWithName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoverServiceServer).DiscoverServiceWithName(ctx, req.(*DiscoverServiceWithNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoverService_DiscoverServiceWithID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverServiceWithIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoverServiceServer).DiscoverServiceWithID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoverService_DiscoverServiceWithID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoverServiceServer).DiscoverServiceWithID(ctx, req.(*DiscoverServiceWithIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoverService_GetRouteInfoWithName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteInfoWithNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoverServiceServer).GetRouteInfoWithName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoverService_GetRouteInfoWithName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoverServiceServer).GetRouteInfoWithName(ctx, req.(*GetRouteInfoWithNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscoverService_GetRouteInfoWithPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteInfoWithPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoverServiceServer).GetRouteInfoWithPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscoverService_GetRouteInfoWithPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoverServiceServer).GetRouteInfoWithPrefix(ctx, req.(*GetRouteInfoWithPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscoverService_ServiceDesc is the grpc.ServiceDesc for DiscoverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscoverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discover.DiscoverService",
	HandlerType: (*DiscoverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverServiceWithName",
			Handler:    _DiscoverService_DiscoverServiceWithName_Handler,
		},
		{
			MethodName: "DiscoverServiceWithID",
			Handler:    _DiscoverService_DiscoverServiceWithID_Handler,
		},
		{
			MethodName: "GetRouteInfoWithName",
			Handler:    _DiscoverService_GetRouteInfoWithName_Handler,
		},
		{
			MethodName: "GetRouteInfoWithPrefix",
			Handler:    _DiscoverService_GetRouteInfoWithPrefix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/discover.proto",
}
